
vertical_table_parser: &VERTICAL_TABLE_PARSER network_insight_sdk_generic_datasources.parsers.common.vertical_table_parser.VerticalTableParser
horizontal_table_parser: &HORIZONTAL_TABLE_PARSER network_insight_sdk_generic_datasources.parsers.common.horizontal_table_parser.HorizontalTableParser
generic_text_parser: &GENERIC_TEXT_PARSER network_insight_sdk_generic_datasources.parsers.common.text_parser.GenericTextParser

package_handler: &PACKAGE_HANDLER
  name: ZipPackageHandler
  arguments:
    path: /tmp/uani

# workloads added will be executed in sequence
workloads: &WORKLOADS
  - &SHOW_VERSION
    table_id: switch
    command: show version
    parser:
      pre_post_processor: CiscoDevicePrePostProcessor
      name: *VERTICAL_TABLE_PARSER

  - &MAC_ADDRESS_TABLE
    table_id: mac-address-table
    command: show mac address-table | xml | exclude disp_vdc | exclude disp_is_static | exclude disp_is_secure | exclude disp_is_ntfy | exclude disp_type | exclude disp_swid | exclude disp_age | exclude disp_sswid | exclude disp_lid
    block_parser:
      name: GenericBlockParser
      arguments:
        start_pattern: "<ROW_mac_address>"
        end_pattern: "</ROW_mac_address>"
    parser:
      name: *GENERIC_TEXT_PARSER
      arguments:
        rules:
          macAddress: "<disp_mac_addr>(.*)</disp_mac_addr>"
          vlan: "<disp_vlan>(.*)</disp_vlan>"
          switchPort: "<disp_port>(.*)</disp_port>"

  - &SHOW_CDP_NEIGHBORS
    table_id: neighbors
    command: show cdp neighbors | xml
    block_parser:
      name: GenericBlockParser
      arguments:
        start_pattern: '<ROW_cdp_neighbor_brief_info>'
        end_pattern: '</ROW_cdp_neighbor_brief_info>'
    parser:
      name: *GENERIC_TEXT_PARSER
      arguments:
        rules:
          remoteDevice: "<device_id>(.*)</device_id>"
          localInterface: "<intf_id>(.*)</intf_id>"
          remoteInterface: "<port_id>(.*)</port_id>"

  - &SHOW_IP_ROUTE_VRF_ALL
    table_id: routes
    command: show ip route vrf all
    block_parser:
      name: GenericBlockParser
      arguments:
        line_pattern: 'IP Route Table for VRF'
    parser:
      pre_post_processor: CiscoRoutePrePostProcessor
      name: *HORIZONTAL_TABLE_PARSER
      arguments:
        header_keys:
          - name
          - network
          - nextHop
          - interfaceName
          - routeType
          - vrf

  - &SHOW_INTERFACE
    table_id: showSwitchPorts
    command: show interface
    block_parser:
      name: GenericBlockParser
      arguments:
        line_pattern: '(\w+) is (up|down)'
    parser:
      pre_post_processor: CiscoSwitchPortPrePostProcessor
      name: *GENERIC_TEXT_PARSER
      arguments:
        rules:
          name: "(.*) is (?:up|down).*"
          connected: ".* is.*(up|down).*"
          accessVlan: "Vlan(\\d+) is up|down"
          administrativeStatus: ".* is.*(up|down).*"
          operationalStatus: ".* is.*(up|down).*"
          hardwareAddress: ".* address.* (\\w+\\.\\w+\\.\\w+)"
          interfaceSpeed: ".* BW (\\w+) Kbit.*"
          operationalSpeed: ".* BW (\\w+) Kbit.*"
          mtu: "^MTU (\\w+) bytes.*"
          duplex: "(\\w+)\\-duplex.*"
          switchPortMode: "Port mode is (\\w+)"

  - &SHOW_ROUTER_INTERFACES
    table_id: showRouterInterfaces
    reuse_command: show interface
    block_parser:
      name: GenericBlockParser
      arguments:
        line_pattern: '(\w+) is (up|down)'
    parser:
      pre_post_processor: CiscoRouterInterfacePrePostProcessor
      name: *GENERIC_TEXT_PARSER
      arguments:
        rules:
          name: "(.*) is (?:up|down).*"
          connected: ".* is.*(up|down).*"
          vlan: "Vlan(\\d+) is up|down"
          administrativeStatus: ".* is.*(up|down).*"
          operationalStatus: ".* is.*(up|down).*"
          hardwareAddress: ".* address.* (\\w+\\.\\w+\\.\\w+)"
          interfaceSpeed: ".* BW (\\w+) Kbit.*"
          operationalSpeed: ".* BW (\\w+) Kbit.*"
          mtu: "^MTU (\\w+) bytes.*"
          ipAddress: "^Internet Address is (\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}/\\d{1,3})"
          duplex: "(\\w+)\\-duplex.*"
          switchPortMode: "Port mode is (\\w+)"

  - &SHOW_PORT_CHANNELS
    table_id: showPortChannels
    command: show interface | section port-channel
    parser:
      pre_post_processor: CiscoPortChannelPrePostProcessor
      name: *GENERIC_TEXT_PARSER
      arguments:
        rules:
          name: "(.*) is (?:up|down).*"
          connected: ".* is.*(up|down).*"
          accessVlan: "Vlan(\\d+) is up|down"
          administrativeStatus: ".* is.*(up|down).*"
          operationalStatus: ".* is.*(up|down).*"
          hardwareAddress: ".* address.* (\\w+\\.\\w+\\.\\w+)"
          interfaceSpeed: ".* BW (\\w+) Kbit.*"
          operationalSpeed: ".* BW (\\w+) Kbit.*"
          mtu: "^MTU (\\w+) bytes.*"
          ipAddress: "^Internet Address is (\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}/\\d{1,3})"
          duplex: "(\\w+)\\-duplex.*"
          switchPortMode: "Port mode is (\\w+)"
          activePorts: "Members in this channel: (.*)"
          passivePorts: "passive"

  - &SHOW_VRF_ALL
    table_id: vrfs
    command: show vrf all
    parser:
      name: *HORIZONTAL_TABLE_PARSER
      arguments:
        skip_head: 1
        header_keys:
          - name
          - id
          - state
          - reason
    select_columns:
      name: name

  - &SHOW_RI_VRF
    table_id: showRIVrf
    command: show ip interface vrf all | include 'Interface (S|s)tatus'
    block_parser:
      name: GenericBlockParser
      arguments:
        line_pattern: 'IP Interface Status for VRF'
    parser:
      pre_post_processor: CiscoRouterInterfaceVrfPrePostProcessor
      name: *HORIZONTAL_TABLE_PARSER
      arguments:
        header_keys:
          - interfaceName
          - vrf

  - &SHOW_VLAN_BRIEF
    table_id: showVlan
    command: show vlan brief
    parser:
      pre_post_processor: CiscoInterfaceVlanPrePostProcessor
      name: *HORIZONTAL_TABLE_PARSER
      arguments:
        skip_head: 1
        header_keys:
          - vlan
          - name
          - status
          - ports

table_joiners: &TABLE_JOINERS
  - &N5K_RI_TABLE
    name: network_insight_sdk_generic_datasources.joiner.table_joiner.SimpleTableJoiner
    source_table: showRIVrf
    destination_table: showRouterInterfaces
    source_column: interfaceName
    destination_column: name
    joined_table_id: router-interfaces
  - &N5K_SP_TABLE
    name: network_insight_sdk_generic_datasources.joiner.table_joiner.SimpleTableJoiner
    source_table: showVlan
    destination_table: showSwitchPorts
    source_column: port
    destination_column: name
    joined_table_id: switch-ports
  - &N5K_PC_TABLE
    name: network_insight_sdk_generic_datasources.joiner.table_joiner.SimpleTableJoiner
    source_table: showVlan
    destination_table: showPortChannels
    source_column: port
    destination_column: name
    joined_table_id: port-channels

result_writer: &RESULT_WRITER
  name: CsvWriter
  path: /tmp/uani
  table_id:
    - switch
    - mac-address-table
    - neighbors
    - routes
    - vrfs
    - router-interfaces
    - switch-ports
    - port-channels


n5k: !include n5k.yml

